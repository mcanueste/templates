[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "typer-hello"
version = "0.1.0"
authors = [
    {name = "Murat Can Ãœste", email = "mcanueste@gmail.com"},
]
description = "Typer CLI Hello World"
requires-python = ">=3.9"
keywords = ["cli", "typer"]
readme = "README.rst"
license = {text = ""}
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]

[project.scripts]
typer-hello = "src.main:main"

[tool.setuptools.dynamic]
dependencies = {file = ["requirements/requirements.txt"]}
optional-dependencies = {dev = {file = ["requirements/requirements-dev.txt"]}}

[tool.pytest.ini_options]
log_cli = "True"
log_cli_level = "WARNING"
verbose = "True"
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
addopts = "--color=yes --verbose --show-capture=no"

[tool.pyright]
include = ["**/*.py"]

[tool.ruff.lint]
select = [
    "A",      # flake8-builtins
    "ANN",    # flake8-annotations
    "ARG",    # flakes8-unused-arguments
    "B",      # flake8-bugbear
    "BLE",    # flake8-blind-except
    "C4",     # flake8-comprehensions
    "C90",    # mccabe
    "D",      # pydocstyle -> flake8-docsrings
    "E",      # pycodestyle
    "F",      # pyflakes -> autoflake
    "FURB",   # refurb
    "G",      # flake8-logging-format
    "I",      # isort
    "N",      # pep8-naming
    "NPY",    # numpy-deprecated-type-alias
    "PERF",   # perflint
    "PGH",    # pygrep-hooks
    "PIE",    # flake8-pie
    "PL",     # pylint
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "RSE",    # flake8-raise
    "RUF",    # ruff
    "S",      # flake8-bandit
    "SIM",    # flake8-simplify
    "T10",    # flake8-debugger
    "TD",     # flake8-todos
    "TID",    # flake8-tidy-imports
    "TRY",    # tryceratops
    "UP",     # pyupgrade
    "W",      # Warning
]

ignore = [
    # ANN - flake8-annotations
    "ANN002", # Missing type annotation for *{name} (i.e. `*args`)
    "ANN003", # Missing type annotation for **{name} (i.e. `**kwargs`)
    "ANN101", # Missing type annotation for {name} in method (i.e. `self`)
    "ANN102", # Missing type annotation for {name} in classmethod (i.e. `cls`)
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    # Lint rules that conflict with formatter.
    # See https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "COM812",
    "COM819",
    "ISC001",
    "ISC002",
    "TD003",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D103", "D104", "F401"] # These rules don't make sense on `__init__.py` files
"**/tests/*" = ["D100", "D101", "D102", "D103", "S101"] # No need for docstrings, assert is allowed

